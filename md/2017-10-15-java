https://s1.ax1x.com/2020/07/17/U685Kx.gif
单例模式的写法
1、饿汉式（静态常量）[可用]
复制代码
public class Singleton {

    private final static Singleton INSTANCE = new Singleton();

    private Singleton(){}

    public static Singleton getInstance(){
        return INSTANCE;
    }
}
复制代码
优点：这种写法比较简单，就是在类装载的时候就完成实例化。避免了线程同步问题。

缺点：在类装载的时候就完成实例化，没有达到Lazy Loading的效果。如果从始至终从未使用过这个实例，则会造成内存的浪费。

2、饿汉式（静态代码块）[可用]
复制代码
public class Singleton {

    private static Singleton instance;

    static {
        instance = new Singleton();
    }

    private Singleton() {}

    public Singleton getInstance() {
        return instance;
    }
}


java常用的类：BufferedReader BufferedWriter ，FileReader FileWirter ，String Integer java.util.Date， Class， HashMap

java常用的接口：List ，Map ，Document ，NodeList ，Servlet,  HttpServletResponse, 
              Transaction(Hibernate)、 Session(Hibernate), HttpSession

java常用的包：java.lang ，java.io ，java.util ，java.sql ，javax.servlet ，
             org.apache.strtuts.action ，org.hibernate

1、final修饰符（关键字）。被final修饰的类，就意味着不能再派生出新的子类，不能作为父类而被子类继承。
                       因此一个类不能既被abstract声明，又被final声明。将变量或方法声明为final，
                       可以保证他们在使用的过程中不被修改。被声明为final的变量必须在声明时给出变量的初始值，
                       而在以后的引用中只能读取。被final声明的方法也同样只能使用，即不能方法重写。


2、finally:是在异常处理时提供finally块来执行任何清除操作。不管有没有异常被抛出、捕获，
          finally块都会被执行。try块中的内容是在无异常时执行到结束。catch块中的内容，
          是在try块内容发生catch所声明的异常时，跳转到catch块中执行。
          finally块则是无论异常是否发生，都会执行finally块的内容，
          所以在代码逻辑中有需要无论发生什么都必须执行的代码，就可以放在finally块中。

3、finalize是方法名。java技术允许使用finalize（）方法在垃圾收集器将对象从内存中清除出去之前做必要的清理工作。
                    这个方法是由垃圾收集器在确定这个对象没有被引用时对这个对象调用的。
                    它是在object类中定义的，因此所有的类都继承了它。
                    子类覆盖finalize（）方法以整理系统资源或者被执行其他清理工作。
                    finalize（）方法是在垃圾收集器删除对象之前对这个对象调用的。 
                    
1、使用了jdk8一下的版本的string的substring方法会存在内存泄漏，
原因是substring方法内部实现是在原数据上进行截取的，
会一直引用字符串，如果字符串过长那么就会占用比较多的内存，
但是jdk8后对这个方法进行了改进，方法实现上首先是对这个字符串进行了拷贝，
然后再去截取，这样就释放了原字符串的内存。

2、在使用完hashmap list 等集合后尽量使用clear方法进行释放，否则他会一直在占用内存，知道垃圾回收。

3、session的保存数据后使用完成后应该及时清理，
否则他会一直保持到session失效

HashMap 与HashTable的区别
1 作者 
2 产生时间
3 继承的父类不同 
HashMap和Hashtable不仅作者不同，而且连父类也是不一样的。HashMap是继承自AbstractMap类，
而HashTable是继承自Dictionary类。不过它们都实现了
同时实现了map、Cloneable（可复制）、Serializable（可序列化）这三个接口
4 对外提供的接口不同 
Hashtable比HashMap多提供了elments() 和contains() 两个方法。
elments() 方法继承自Hashtable的父类Dictionnary。elements() 方法用于返回此Hashtable中的value的枚举。
contains()方法判断该Hashtable是否包含传入的value。
它的作用与containsValue()一致。事实上，contansValue() 就只是调用了一下contains() 方法。



5 对Null key 和Null value的支持不同 
Hashtable既不支持Null key也不支持Null value。Hashtable的put()方法的注释中有说明。 
当key为Null时，调用put() 方法，运行到下面这一步就会抛出空指针异常。因为拿一个Null值去调用方法了。 
当value为null值时，Hashtable对其做了限制，运行到下面这步也会抛出空指针异常。 
HashMap中，null可以作为键，这样的键只有一个；可以有一个或多个键所对应的值为null。
当get()方法返回null值时，可能是 HashMap中没有该键，也可能使该键所对应的值为null。
因此，在HashMap中不能由get()方法来判断HashMap中是否存在某个键， 而应该用containsKey()方法来判断。

6 线程安全性不同 
Hashtable是线程安全的，它的每个方法中都加入了Synchronize方法。
在多线程并发的环境下，可以直接使用Hashtable，不需要自己为它的方法实现同步

HashMap不是线程安全的，在多线程并发的环境下，可能会产生死锁等问题。
具体的原因在下一篇文章中会详细进行分析。使用HashMap时就必须要自己增加同步处理，

虽然HashMap不是线程安全的，但是它的效率会比Hashtable要好很多。
这样设计是合理的。在我们的日常使用当中，大部分时间是单线程操作的。HashMap把这部分操作解放出来了。
当需要多线程操作的时候可以使用线程安全的ConcurrentHashMap。
ConcurrentHashMap虽然也是线程安全的，但是它的效率比Hashtable要高好多倍。
因为ConcurrentHashMap使用了分段锁，并不对整个数据进行锁定。

7 遍历方式的内部实现上不同 
Hashtable、HashMap都使用了 Iterator。而由于历史原因，Hashtable还使用了Enumeration的方式 。

HashMap的Iterator是fail-fast迭代器。当有其它线程改变了HashMap的结构（增加，删除，修改元素），
将会抛出ConcurrentModificationException。
不过，通过Iterator的remove()方法移除元素则不会抛出ConcurrentModificationException异常。
但这并不是一个一定发生的行为，要看JVM。

JDK8之前的版本中，Hashtable是没有fast-fail机制的。在JDK8及以后的版本中 ，HashTable也是使用fast-fail的， 源码如下： 


modCount的使用类似于并发编程中的CAS（Compare and Swap）技术。
我们可以看到这个方法中，每次在发生增删改的时候都会出现modCount++的动作。
而modcount可以理解为是当前hashtable的状态。每发生一次操作，状态就向前走一步。
设置这个状态，主要是由于hashtable等容器类在迭代时，判断数据是否过时时使用的。
尽管hashtable采用了原生的同步锁来保护数据安全。但是在出现迭代数据的时候，
则无法保证边迭代，边正确操作。于是使用这个值来标记状态。一旦在迭代的过程中状态发生了改变，
则会快速抛出一个异常，终止迭代行为。

8 初始容量大小和每次扩充容量大小的不同 
Hashtable默认的初始大小为11，之后每次扩充，容量变为原来的2n+1。
HashMap默认的初始化大小为16。之后每次扩充，容量变为原来的2倍。

创建时，如果给定了容量初始值，那么Hashtable会直接使用你给定的大小，
而HashMap会将其扩充为2的幂次方大小。也就是说Hashtable会尽量使用素数、奇数。而HashMap则总是使用2的幂作为哈希表的大小。

之所以会有这样的不同，是因为Hashtable和HashMap设计时的侧重点不同。
Hashtable的侧重点是哈希的结果更加均匀，使得哈希冲突减少。当哈希表的大小为素数时，简单的取模哈希的结果会更加均匀。
而HashMap则更加关注hash的计算效率问题。在取模计算时，如果模数是2的幂，
那么我们可以直接使用位运算来得到结果，效率要大大高于做除法。HashMap为了加快hash的速度，
将哈希表的大小固定为了2的幂。当然这引入了哈希分布不均匀的问题，所以HashMap为解决这问题，又对hash算法做了一些改动。
这从而导致了Hashtable和HashMap的计算hash值的方法不同 
9 计算hash值的方法不同 
为了得到元素的位置，首先需要根据元素的 KEY计算出一个hash值，然后再用这个hash值来计算得到最终的位置。

Hashtable直接使用对象的hashCode。hashCode是JDK根据对象的地址或者字符串或者数字算出来的int类型的数值.
然后再使用除留余数发来获得最终的位置。 

Hashtable在计算元素的位置时需要进行一次除法运算，而除法运算是比较耗时的。 
HashMap为了提高计算效率，将哈希表的大小固定为了2的幂，这样在取模预算时，
不需要做除法，只需要做位运算。位运算比除法的效率要高很多。

HashMap的效率虽然提高了，但是hash冲突却也增加了。
因为它得出的hash值的低位相同的概率比较高，而计算位运算

为了解决这个问题，HashMap重新根据hashcode计算hash值后，又对hash值做了一些运算来打散数据。
使得取得的位置更加分散，从而减少了hash冲突。当然了，为了高效，HashMap只做了一些简单的位处理。
从而不至于把使用2 的幂次方带来的效率提升给抵消掉。

